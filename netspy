#!/usr/bin/env python3
"""
NetSpy - Network Traffic Logger CLI Frontend

A command-line interface for the NetSpy network traffic logging library.
This script provides a convenient way to run applications with NetSpy
without manually setting LD_PRELOAD and environment variables.
"""

import argparse
import os
import sys
import subprocess
import shutil
import signal
import time
from pathlib import Path


def find_libnetspy():
    """Find the netspy library in common installation locations."""
    # Try common installation paths
    common_paths = [
        "/usr/local/lib/libnetspy.so",
        "/usr/lib/libnetspy.so",
        "/usr/lib/x86_64-linux-gnu/libnetspy.so",
        # Try relative to script location (development)
        Path(__file__).parent / "build" / "libnetspy.so",
        Path(__file__).parent / "libnetspy.so",
    ]
    
    for path in common_paths:
        if Path(path).exists():
            return str(path)
    
    # Try to find using ldconfig
    try:
        result = subprocess.run(
            ["ldconfig", "-p"],
            capture_output=True,
            text=True,
            check=True
        )
        for line in result.stdout.splitlines():
            if "libnetspy.so" in line:
                # Extract path from ldconfig output
                path = line.split("=>")[-1].strip()
                if Path(path).exists():
                    return path
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    
    return None


def create_parser():
    """Create and configure the argument parser."""
    parser = argparse.ArgumentParser(
        prog="netspy",
        description="Network Traffic Logger - Monitor network calls and capture traffic to PCAP files or stream over IP",
        epilog="""
Examples:
  netspy curl google.com                      # Basic usage - save to PCAP file
  netspy --stream 57012 curl google.com      # Stream PCAP over IP on port 57012
  netspy --wireshark curl google.com         # Automatically open in Wireshark
  netspy --output /tmp curl google.com       # Save PCAP to /tmp
  netspy --quiet firefox                      # Run with minimal output
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # NetSpy-specific options
    parser.add_argument(
        "--stream", "-s",
        metavar="PORT",
        type=int,
        help="Enable PCAP-over-IP streaming on specified port (default: 57012)"
    )
    
    parser.add_argument(
        "--wireshark", "-w",
        action="store_true",
        help="Automatically start Wireshark to capture the stream (implies --stream)"
    )
    
    parser.add_argument(
        "--stream-client", "-c",
        action="store_true",
        help="Start Python stream client to view packets (implies --stream)"
    )
    
    parser.add_argument(
        "--library", "-l",
        metavar="PATH",
        help="Path to libnetspy.so (auto-detected if not specified)"
    )
    
    parser.add_argument(
        "--output", "-o",
        metavar="DIR",
        help="Directory for PCAP output files (only for file mode, default: current directory)"
    )
    
    parser.add_argument(
        "--quiet", "-q",
        action="store_true",
        help="Disable debug log output"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="Enable verbose debug output"
    )
    
    parser.add_argument(
        "--dry-run", "-n",
        action="store_true",
        help="Show what would be executed without running it"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version="netspy 1.1.0 (with PCAP-over-IP support)"
    )
    
    # Target command and its arguments
    parser.add_argument(
        "command",
        nargs="?",
        help="Command to execute with NetSpy"
    )
    
    parser.add_argument(
        "args",
        nargs=argparse.REMAINDER,
        help="Arguments for the target command"
    )
    
    return parser


def start_wireshark(port):
    """Start Wireshark with TCP capture interface."""
    try:
        wireshark_cmd = ["wireshark", "-k", "-i", f"TCP@127.0.0.1:{port}"]
        print(f"Starting Wireshark to capture from port {port}...", file=sys.stderr)
        subprocess.Popen(wireshark_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)  # Give Wireshark time to start
        return True
    except FileNotFoundError:
        print("Error: Wireshark not found. Please install wireshark.", file=sys.stderr)
        return False
    except Exception as e:
        print(f"Error starting Wireshark: {e}", file=sys.stderr)
        return False


def start_stream_client(port):
    """Start Python stream client."""
    try:
        client_script = Path(__file__).parent / "examples" / "pcap_stream_client.py"
        if not client_script.exists():
            # Try installed location
            client_script = Path("/usr/local/share/netspy/examples/pcap_stream_client.py")
        
        if not client_script.exists():
            print("Error: Python stream client not found.", file=sys.stderr)
            print("Make sure examples/pcap_stream_client.py is available.", file=sys.stderr)
            return False
        
        client_cmd = ["python3", str(client_script), "localhost", str(port)]
        print(f"Starting Python stream client for port {port}...", file=sys.stderr)
        subprocess.Popen(client_cmd)
        time.sleep(1)  # Give client time to start
        return True
    except Exception as e:
        print(f"Error starting stream client: {e}", file=sys.stderr)
        return False


def main():
    """Main entry point."""
    parser = create_parser()
    args = parser.parse_args()
    
    # Validate that a command was provided
    if not args.command:
        parser.error("No command specified. Use --help for usage information.")
    
    # Find the NetSpy library
    if args.library:
        libnetspy_path = args.library
        if not Path(libnetspy_path).exists():
            print(f"Error: Specified library not found: {libnetspy_path}", file=sys.stderr)
            return 1
    else:
        libnetspy_path = find_libnetspy()
        if not libnetspy_path:
            print("Error: Could not find libnetspy.so", file=sys.stderr)
            print("Try specifying the path with --library or install NetSpy system-wide", file=sys.stderr)
            return 1
    
    # Check if target command exists
    if not shutil.which(args.command):
        print(f"Error: Command not found: {args.command}", file=sys.stderr)
        return 1
    
    # Determine streaming configuration
    use_streaming = args.stream or args.wireshark or args.stream_client
    stream_port = args.stream or 57012
    
    # Prepare environment variables
    env = os.environ.copy()
    env["LD_PRELOAD"] = libnetspy_path
    
    # Configure streaming if requested
    if use_streaming:
        env["NETSPY_PCAP_OVER_IP_PORT"] = str(stream_port)
        if args.output:
            print("Warning: --output ignored in streaming mode", file=sys.stderr)
    else:
        # Handle output directory for file mode
        if args.output:
            output_dir = Path(args.output).resolve()
            if not output_dir.exists():
                print(f"Error: Output directory does not exist: {output_dir}", file=sys.stderr)
                return 1
            if not output_dir.is_dir():
                print(f"Error: Output path is not a directory: {output_dir}", file=sys.stderr)
                return 1
            # Change to output directory so PCAP files are created there
            os.chdir(output_dir)
    
    # Pass quiet flag to library
    if args.quiet:
        env["NETSPY_QUIET"] = "1"
    
    # Prepare command
    command = [args.command] + args.args
    
    # Show what would be executed in dry-run mode
    if args.dry_run:
        print("Would execute:")
        print(f"  Working directory: {os.getcwd()}")
        print(f"  LD_PRELOAD: {libnetspy_path}")
        if use_streaming:
            print(f"  NETSPY_PCAP_OVER_IP_PORT: {stream_port}")
            print(f"  Mode: PCAP-over-IP streaming")
        else:
            print(f"  Mode: PCAP file output")
        print(f"  Command: {' '.join(command)}")
        if args.wireshark:
            print(f"  Would start: wireshark -k -i TCP@127.0.0.1:{stream_port}")
        if args.stream_client:
            print(f"  Would start: python3 examples/pcap_stream_client.py localhost {stream_port}")
        return 0
    
    # Start streaming viewers if requested
    viewer_started = False
    if args.wireshark:
        if start_wireshark(stream_port):
            viewer_started = True
    
    if args.stream_client:
        if start_stream_client(stream_port):
            viewer_started = True
    
    # Show verbose information
    if args.verbose:
        print(f"NetSpy: Using library {libnetspy_path}", file=sys.stderr)
        if use_streaming:
            print(f"NetSpy: PCAP-over-IP streaming on port {stream_port}", file=sys.stderr)
        else:
            print(f"NetSpy: PCAP file mode, working directory: {os.getcwd()}", file=sys.stderr)
        print(f"NetSpy: Executing: {' '.join(command)}", file=sys.stderr)
    elif not args.quiet:
        if use_streaming:
            print(f"NetSpy: Streaming PCAP data on port {stream_port}", file=sys.stderr)
            if viewer_started:
                print("NetSpy: Viewer started - traffic will appear when command runs", file=sys.stderr)
        else:
            pass  # Filename logging moved to library where actual PID is known
    
    # Execute the command
    try:
        result = subprocess.run(command, env=env)
        return result.returncode
    except KeyboardInterrupt:
        print("\nInterrupted by user", file=sys.stderr)
        return 130
    except Exception as e:
        print(f"Error executing command: {e}", file=sys.stderr)
        return 1


if __name__ == "__main__":
    sys.exit(main())